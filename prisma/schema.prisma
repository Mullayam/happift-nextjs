// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  google_id   String?     @default("")
  firstName   String
  lastName    String?     @default("")
  phone       String?     @default("")
  email       String      @unique
  password    String
  avatar      String?     @default("")
  role        ROLE        @default(F_3026)
  permissions PERMISSIONS @default(B_555)
  status      STATUS      @default(G_0x0000)
  tokens      Tokens[]
  payements   Payements[]
  kycDocs     KycDocs?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ListedCards ListedCards[]
}

model Tokens {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  oauthAccessToken  String?  @default("")
  oauthRefreshToken String?  @default("")
  resetPassToken    String?  @default("")
  extraTokens       String[] @default([])
  id_token          String?
  userId            String   @db.ObjectId
  user              Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  expiresAt         String?
}

enum ROLE {
  F_3026 // no kyc && user
  U_0012 //guest && pending && no kyc 
  C_8256 //guest && declined kyc
  K_3566 // kyc && user
}

enum PERMISSIONS {
  B_555
  I_777
  N_00
}

enum STATUS {
  G_0x0000 // email not verified
  E_0x0045 // google account
  T_0x1100 // email verified
  O_0x0220 //suspended account
  F_0x0001 //deactivated accounts
  F_0x0002 // special privilage to access manage
}

enum PaymentStatus {
  PENDING
  DECLINED
  VERIFIED
  FAILURE
  SUCCESS
  PAID
}

model Support {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  fullName String
  email    String
  message  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GiftCards {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  cardName    String
  image       String
  stock       String
  isAvailable Boolean
  worth       String
  buyPrice    String
  cardDetails String
  category  String     
   

  Payements Payements[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

 

model ListedCards {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  listingId      String
  orderId        String
  cardName       String
  cardType       String
  expiryDate     String
  balance        String
  payout         String
  voucherCode    String?
  voucherPin     String?
  voucherDetails String
  status         PaymentStatus
  userId         String        @db.ObjectId
  User           Users         @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payements {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  orderId        String
  paymentDetails Json?

  userId     String        @db.ObjectId
  User       Users         @relation(fields: [userId], references: [id], onDelete: Cascade)
  giftCardId String        @db.ObjectId
  giftCards  GiftCards     @relation(fields: [giftCardId], references: [id], onDelete: Cascade)
  status     PaymentStatus
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model KycDocs {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  id_proof String
  pancard  String
  selfie   String
  userId   String @db.ObjectId
  User     Users  @relation(fields: [userId], references: [id], onDelete: Cascade)

  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([userId])
}
