// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  google_id   String?     @default("")
  firstName   String
  lastName    String?     @default("")
  phone       String?     @default("")
  email       String      @unique
  password    String
  avatar      String?     @default("")
  role        ROLE        @default(F_3026)
  permissions PERMISSIONS @default(B_555)
  status      STATUS      @default(G_0x0000)
  tokens      Tokens[]
  orders      Orders[]
  payements   Payements[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tokens {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  oauthAccessToken  String?  @default("")
  oauthRefreshToken String?  @default("")
  resetPassToken    String?  @default("")
  extraTokens       String[] @default([])
  id_token          String?
  userId            String   @db.ObjectId
  user              Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  expiresAt         String?
}

enum ROLE {
  F_3026
  U_0012
  C_8256
  K_3566
}

enum PERMISSIONS {
  B_555
  I_777
  N_00
}

enum STATUS {
  G_0x0000
  E_0x0045
  T_0x1100
  O_0x0220
  F_0x0001
  F_0x0002
}

model Support {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  fullName String
  email    String
  message  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GiftCards {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  cardName    String
  image       String
  stock       Int
  isAvailable Boolean
  worth       Int
  buyPrice    Int
  categoryId  Categories[]
  orders      Orders[]
  Payements   Payements[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Categories {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  catgoryName String
  categoryId  String    @db.ObjectId
  giftCards   GiftCards @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Orders {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  giftcardName String
  giftcardId   String      @db.ObjectId
  giftCards    GiftCards   @relation(fields: [giftcardId], references: [id], onDelete: Cascade)
  userId       String      @db.ObjectId
  user         Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  payements    Payements[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payements {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  orderId String @db.ObjectId
  order   Orders @relation(fields: [orderId], references: [id], onDelete: Cascade)

  userId     String    @db.ObjectId
  User       Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  giftcardId String    @db.ObjectId
  giftCards  GiftCards @relation(fields: [giftcardId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
